const { expect } = require("chai");
const { ethers } = require("hardhat");
const utils = ethers.utils
const fs = require("fs");
const { groth16, plonk } = require("snarkjs");

function unstringifyBigInts(o) {
    if ((typeof(o) == "string") && (/^[0-9]+$/.test(o) ))  {
        return BigInt(o);
    } else if ((typeof(o) == "string") && (/^0x[0-9a-fA-F]+$/.test(o) ))  {
        return BigInt(o);
    } else if (Array.isArray(o)) {
        return o.map(unstringifyBigInts);
    } else if (typeof o == "object") {
        if (o===null) return null;
        const res = {};
        const keys = Object.keys(o);
        keys.forEach( (k) => {
            res[k] = unstringifyBigInts(o[k]);
        });
        return res;
    } else {
        return o;
    }
}

describe("HelloWorld", function () {
    let Verifier;
    let verifier;

    beforeEach(async function () {
        Verifier = await ethers.getContractFactory("HelloWorldVerifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        //[assignment] Add comments to explain what each line is doing
        
        // Param1: input object, Param2: wasm file (created during compilation of circuit), 
        // Param3: zkeyFileName (The zkey is a zero-knowledge key that includes both the proving 
        // and verification keys as well as phase 2 contributions)
        // Returns: proof and public signals
        // Function description: 
        // Generates a witness file and Passes it into groth16FullProve and returns proof and public signals
        // Witness file generation: 
        // Calculate all the signals of the circuit that match all the constraints of the circuit. For that, the
        // function calculateWitness uese the Wasm module generated by Circom.
        // Proof Creation: 
        // Given the wtns file created from the previous step and the zkey file, both are passed as an input to the groth16Prove function. 
        // groth16Prove function checks if: 
        //  zkey file is not groth16
        //  Curve of the witness does not match the curve of the proving key
        //  Validates the length of witness
        // Performs some math and finally returns a proof and public signals
        const { proof, publicSignals } = await groth16.fullProve({"a":"1","b":"2"}, 
        "contracts/circuits/HelloWorld/HelloWorld_js/HelloWorld.wasm","contracts/circuits/HelloWorld/circuit_final.zkey");

        // prints first public signal to the console
        console.log('1x2 =',publicSignals[0]);

        // Converts appropriate string to BigInt from publicSignals array
        const editedPublicSignals = unstringifyBigInts(publicSignals);
        
        // Converts appropriate string to BigInt from proof object
        const editedProof = unstringifyBigInts(proof);

        // Creates Solidity calldata using editedProof and editedPublicSignals, later be used to pass to the Solidity verifier
        const calldata = await groth16.exportSolidityCallData(editedProof, editedPublicSignals);

        // Converts calldata into argv array
        // Replaces literally "/", one of ""[\", whitespace, literally "]/g" with blank, 
        // splits the calldata with comma
        // each comma separated value will converted from BigInt to string again
        const argv = calldata.replace(/["[\]\s]/g, "").split(',').map(x => BigInt(x).toString());
    
        // Prepare inputs for verifier contract
        const a = [argv[0], argv[1]];
        const b = [[argv[2], argv[3]], [argv[4], argv[5]]];
        const c = [argv[6], argv[7]];
        const Input = argv.slice(8);

        // Verify the proof using Smart Contract and expect to be true
        expect(await verifier.verifyProof(a, b, c, Input)).to.be.true;
    });
    it("Should return false for invalid proof", async function () {
        let a = [0, 0];
        let b = [[0, 0], [0, 0]];
        let c = [0, 0];
        let d = [0];

        // It should return invalid proof because proof is not created for the given input here in the first place.
        expect(await verifier.verifyProof(a, b, c, d)).to.be.false;
    });
});


describe("Multiplier3 with Groth16", function () {

    beforeEach(async function () {
        //[assignment] insert your script here

        Verifier = await ethers.getContractFactory("Multiplier3Verifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        //[assignment] insert your script here

        const { proof, publicSignals } = await groth16.fullProve({"a":"2","b":"3", "c":"5"}, 
        "contracts/circuits/Multiplier3/Multiplier3_js/Multiplier3.wasm","contracts/circuits/Multiplier3/circuit_final.zkey");

        // prints first public signal to the console
        console.log('2x3x5 =',publicSignals[0]);

        // Converts appropriate string to BigInt from publicSignals array
        const editedPublicSignals = unstringifyBigInts(publicSignals);
        
        // Converts appropriate string to BigInt from proof object
        const editedProof = unstringifyBigInts(proof);

        // Creates Solidity calldata using editedProof and editedPublicSignals, later be used to pass to the Solidity verifier
        const calldata = await groth16.exportSolidityCallData(editedProof, editedPublicSignals);

        // Converts calldata into argv array
        // Replaces literally "/", one of ""[\", whitespace, literally "]/g" with blank, 
        // splits the calldata with comma
        // each comma separated value will converted from BigInt to string again
        const argv = calldata.replace(/["[\]\s]/g, "").split(',').map(x => BigInt(x).toString());
    
        // Prepare inputs for verifier contract
        const a = [argv[0], argv[1]];
        const b = [[argv[2], argv[3]], [argv[4], argv[5]]];
        const c = [argv[6], argv[7]];
        const Input = argv.slice(8);

        // Verify the proof using Smart Contract and expect to be true
        expect(await verifier.verifyProof(a, b, c, Input)).to.be.true;
    });
    it("Should return false for invalid proof", async function () {
        //[assignment] insert your script here

        let a = [0, 0];
        let b = [[0, 0], [0, 0]];
        let c = [0, 0];
        let d = [0];

        // It should return invalid proof because proof is not created for the given input here in the first place.
        expect(await verifier.verifyProof(a, b, c, d)).to.be.false;
    });
});


describe("Multiplier3 with PLONK", function () {

    beforeEach(async function () {
        //[assignment] insert your script here

        Verifier = await ethers.getContractFactory("PlonkVerifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        //[assignment] insert your script here

        const { proof, publicSignals } = await plonk.fullProve({"a":"2","b":"3","c":"5"}, 
        "contracts/circuits/Multiplier3_plonk/Multiplier3_js/Multiplier3.wasm","contracts/circuits/Multiplier3_plonk/circuit_final.zkey");

        // prints first public signal to the console
        console.log('2x3x5 =',publicSignals[0]);

        // Converts appropriate string to BigInt from publicSignals array
        const editedPublicSignals = unstringifyBigInts(publicSignals);
        
        // Converts appropriate string to BigInt from proof object
        const editedProof = unstringifyBigInts(proof);

        // Creates Solidity calldata using editedProof and editedPublicSignals, later be used to pass to the Solidity verifier
        const calldata = await plonk.exportSolidityCallData(editedProof, editedPublicSignals);

        // Converts calldata into argv array
        // Replaces literally "/", one of ""[\", whitespace, literally "]/g" with blank, 
        // splits the calldata with comma
        const argv = calldata.replace(/["[\]\s]/g, "").split(',');

        // const inBytes = utils.formatBytes32String(a);
        const Input = [argv[1]];

        // // Verify the proof using Smart Contract and expect to be true
        expect(await verifier.verifyProof(argv[0], Input)).to.be.true;
    });
    it("Should return false for invalid proof", async function () {
        //[assignment] insert your script here

        let a = 0;
        let Input = ['0'];

        // It should return invalid proof because proof is not created for the given input here in the first place.
        expect(await verifier.verifyProof(a, Input)).to.be.false;
    });
});